类与对象的关系

类：
    事物的描述。是具备某些共同特征的实体的集合，它是一种抽象的数据类型，它是对所具有相同特征实体的抽象。
在面向对象的程序设计语言中，类是对一类“事物”的属性与行为的抽象。


对象：
    该类事物的实例。在Java中通过new进行创建。是一个真实世界中的实体，对象与实体是一一对应关系的，
意思就是现实世界的每一个实体都是一个对象，所以对象是一个具体的概念。对象是一种个性的表示，表示一个独立的个体，
每个对象拥有自己独立的属性，依靠属性来区分不同对象。

1. 类是一个抽象的概念，它不存在于现实中的时间/空间里，类只是为所有的对象定义了抽象的属性与行为。就好像“Person（人）”这个类，
它虽然可以包含很多个体，但它本身不存在于现实世界上。
2. 对象是类的一个具体。它是一个实实在在存在的东西。
3. 类是一个静态的概念，类本身不携带任何数据。当没有为类创建任何对象时，类本身不存在于内存空间中。
4. 对象是一个动态的概念。每一个对象都存在着有别于其它对象的属于自己的独特的属性和行为。对象的属性可以随着它自己的行为而发生改变。

类是对象的模板，对象是类的实例。类只有通过对象才可以使用，而在开发之中应该先产生类，之后再产生对象。类不能直接使用，对象是可以直接使用的。

在Java中定义类，使用关键字class完成。语法如下：
class 类名称 {
         属性 (变量) ;
         行为 (方法（函数）) ;
}

 引用数据类型与基本数据类型最大的不同在于：引用数据类型需要内存的分配和使用。
 所以，关键字new的主要功能就是分配内存空间，也就是说，只要使用引用数据类型，就要使用关键字new来分配内存空间。

 当一个实例化对象产生之后，可以按照如下的方式进行类的操作：
 对象.属性：表示调用类之中的属性；
 对象.方法()：表示调用类之中的方法。

类定义完成之后，肯定无法直接使用。如果要使用，必须依靠对象，那么由于类属于引用数据类型，所以对象的产生格式（两种格式）如下：
(1)方式一：声明并实例化对象

    类名称 对象名称 = new 类名称 ();

(2)方式二：先声明对象，然后实例化对象：

    类名称 对象名称 = null ;
    对象名称 = new 类名称 ();


这两种创建对象的方式有什么区别呢？
我们从内存的角度分析。首先，给出两种内存空间的概念：
（1）堆内存：保存对象的属性内容。堆内存需要用new关键字来分配空间；
（2）栈内存：保存的是堆内存的地址（在这里为了分析方便，可以简单理解为栈内存保存的是对象的名字）。

方式一这种创建对象的方式，使用new创建的同时，变量已经在堆内存中了，当使用的时候直接进行赋值就可以
方式二这种创建对象的方式，就相当于首先在栈内存中分配对象空间，只有执行第二步的时候才会就行变量的加载












